plugins {
    id "com.google.cloud.tools.jib" version "1.2.0"
    id "io.spring.dependency-management" version "1.0.7.RELEASE"
    id "me.champeau.gradle.jmh" version "0.4.8"
    id "org.jetbrains.kotlin.jvm" version "1.3.50"
    id "org.springframework.boot" version "2.1.6.RELEASE"
}

version = "0.0.1"

configurations {
    implementation {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }
    testImplementation {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }
}

dependencies {
    // module dependencies
    implementation(project(":name-score-computation"))

    // library dependencies
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "org.springframework.boot:spring-boot-autoconfigure:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-aop:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-log4j2:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    implementation "org.springframework.shell:spring-shell-starter:${springShellVersion}"

    // test frameworks
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation "org.spockframework:spock-spring:${spockVersion}"
    testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    testImplementation "org.springframework.boot:spring-boot-test:${springBootVersion}"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

bootJar {
    manifest {
        attributes "Start-Class": "com.shrader.namescore"
    }
    archiveBaseName = "name-score-shell"
    version =  "0.1.1"
}

bootRun {
    standardInput = System.in
    jvmArgs = ["-Xverify:none"] // startup optimization
}

jmh {
    humanOutputFile = null
    warmupIterations = 1
    iterations = 1
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        options.encoding = 'UTF-8'
    }
}

/*
jar {
    manifest {
        attributes "Main-Class": "com.baeldung.fatjar.Application"
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
*/